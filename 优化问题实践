import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot as plt
import torch


def himmelblau(x1):
    return (x1[0] ** 2 + x1[1] - 11) ** 2 + (x1[0] + x1[1] ** 2 - 7) ** 2


x = np.arange(-6, 6, 0.1)
y = np.arange(-6, 6, 0.1)                      # x，y都是int类型 numpy数组

print('x,y range:', x.shape, y.shape, x.size)
X, Y = np.meshgrid(x, y)
print('X, Y maps:', X.shape, Y.shape)
Z = himmelblau([X, Y])

fig = plt.figure('himmelblau')
ax = fig.gca(projection='3d')        # set it to 3d projection='3d来声明axes为axes3D
ax.plot_surface(X, Y, Z)             # 设立 x y z坐标轴
ax.view_init(60, -30)                # 改变图像角度,即调整图像视角
ax.set_xlabel('x')
ax.set_ylabel('y')
plt.show()


# [1.,0.,], [-4, 0.], [4, 0]   该函数有四个最小，即初始化起点不同，将滚向四个最小点中最近的一个。
x = torch.tensor([-4., 0.], requires_grad=True)
optimizer = torch.optim.Adam([x], lr=1e-3)
for step in range(20000):
    pred = himmelblau(x)
    optimizer.zero_grad()
    pred.backward()
    optimizer.step()

    '''print('x: {}, x.grad: {} | y: {}, y.grad: {}'.format(x.norm(), x.grad, y.norm(), y.grad))
    x, y都是int numpy不是张量，没有norm'''

    if step % 2000 == 0:
        print('x: {}, x.grad: {}'.format(x, x.grad))          # 可以查看梯度
        print('step {}: x={}, f(x)={}'.format(step, x.tolist(), pred.item()))

